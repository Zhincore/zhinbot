datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// #### MAIN ####

model Guild {
  id String @id

  members Member[]

  // Birthdays
  bdayAlertTime    String?
  bdayAlertChannel String?
  bdayAlertPing    String?

  // Player
  playerChannel String?

  // Modules
  modConfig ModConfig?
  warnings  Warning[]
  rating    MessageRating[]
  selfRoles SelfRolesItem[]
  // effects    EffectItem[]
  // alerts     AlertsItem[]
}

model Member {
  id      String
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  birthday Birthday?      @relation(fields: [id], references: [userId])
  warnings Warning[]
  rating   MessageRating?

  @@id([guildId, id])
}

// #### MODULES ####

// ## Birthdays ##
model Birthday {
  userId String   @id
  date   DateTime

  members Member[]
}

// ## Message Rating ##
model MessageRating {
  guild   Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String
  member  Member? @relation(fields: [guildId, userId], references: [guildId, id], onDelete: Cascade)
  userId  String

  rating Int @default(0)

  @@id([guildId, userId])
}

// ## Moderator ##
model ModConfig {
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String @unique

  logChannel String?

  automod                Boolean @default(false)
  automodDisabledFilters Json    @default("[]")
}

model Warning {
  id      Int     @unique @default(autoincrement())
  guild   Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String
  member  Member? @relation(fields: [guildId, userId], references: [guildId, id], onDelete: Cascade)
  userId  String

  reason String

  staffId   String
  timestamp DateTime @default(now())

  @@id([guildId, id])
}

// ## Self-roles ##
model SelfRolesItem {
  name      String
  guild     Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   String
  channelId String?
  messageId String? @unique

  color       Int     @default(0)
  title       String  @default("Choose your role")
  description String?
  message     String?
  multiSelect Boolean @default(true)
  showHelp    Boolean @default(true)
  showRoles   Boolean @default(true)
  showName    Boolean @default(false)

  roles SelfRolesRole[]

  @@id([guildId, name])
}

model SelfRolesRole {
  roleId      String
  emoji       String
  label       String?
  description String?

  item     SelfRolesItem @relation(fields: [guildId, itemName], references: [guildId, name], onDelete: Cascade)
  guildId  String
  itemName String

  @@id([guildId, itemName, roleId])
}

// ## Alerts ##
// model AlertsItem {
//   guild     Guild   @relation(references: [id], fields: [guildId], onDelete: Cascade)
//   guildId   String
//   type      String
//   name      String
//   channelId String
//   roleId    String?
//
//   @@id([guildId, type, name])
// }

// ## Effects ##
// model EffectItem {
//   id        Int     @default(autoincrement())
//   guild     Guild   @relation(references: [id], fields: [guildId], onDelete: Cascade)
//   guildId   String
//   order     Int     @default(0)
//   pattern   String
//   response  String
//   transform String?
//
//   @@id([id, guildId])
// }
